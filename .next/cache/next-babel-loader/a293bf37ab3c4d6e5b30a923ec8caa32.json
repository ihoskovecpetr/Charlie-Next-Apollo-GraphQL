{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/macuser/Desktop/Demo/api-routes-apollo-server-and-client/apollo/client.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nvar apolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx) {\n        var AppTree, apolloClient, pageProps, _ref4, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree; // Initialize ApolloClient, add it to the ctx object so\n                // we can use it in `PageComponent.getInitialProp`.\n\n                apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n                pageProps = {};\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return PageComponent.getInitialProps(ctx);\n\n              case 6:\n                pageProps = _context.sent;\n\n              case 7:\n                if (!false) {\n                  _context.next = 24;\n                  break;\n                }\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 10:\n                if (!ssr) {\n                  _context.next = 24;\n                  break;\n                }\n\n                _context.prev = 11;\n                _context.next = 14;\n                return import(\"@apollo/react-ssr\");\n\n              case 14:\n                _ref4 = _context.sent;\n                getDataFromTree = _ref4.getDataFromTree;\n                _context.next = 18;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread({}, pageProps, {\n                    apolloClient: apolloClient\n                  }),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 69\n                  },\n                  __self: this\n                }));\n\n              case 18:\n                _context.next = 23;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](11);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error(\"Error while running `getDataFromTree`\", _context.t0);\n\n              case 23:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 24:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                  apolloState: apolloState\n                }));\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[11, 20]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ssrMode = false;\n  var cache = new InMemoryCache().restore(initialState); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode: ssrMode,\n    link: createIsomorphLink(),\n    cache: cache\n  });\n}\n\nfunction createIsomorphLink() {\n  if (false) {\n    //server\n    var _require = require(\"apollo-link-schema\"),\n        SchemaLink = _require.SchemaLink;\n\n    var _require2 = require(\"./schema\"),\n        schema = _require2.schema;\n\n    return new SchemaLink({\n      schema: schema\n    });\n  } else {\n    //browser\n    var _require3 = require(\"apollo-link-http\"),\n        HttpLink = _require3.HttpLink; //const httpLink = new...\n\n\n    return new HttpLink({\n      uri: \"/api/graphql\",\n      credentials: \"same-origin\"\n    });\n\n    var _require4 = require(\"apollo-link-ws\"),\n        WebSocketLink = _require4.WebSocketLink;\n\n    var wsLink = new WebSocketLink({\n      uri: \"ws://localhost:3000/api/subs\",\n      options: {\n        reconnect: true\n      }\n    });\n    console.log(\"SPLIT LINK: \", function (_ref5) {\n      var query = _ref5.query;\n\n      var _getMainDefinition = getMainDefinition(query),\n          kind = _getMainDefinition.kind,\n          operation = _getMainDefinition.operation;\n\n      return kind === \"OperationDefinition\" && operation === \"subscription\";\n    });\n    var link = split(function (_ref6) {\n      var query = _ref6.query;\n\n      var _getMainDefinition2 = getMainDefinition(query),\n          kind = _getMainDefinition2.kind,\n          operation = _getMainDefinition2.operation;\n\n      return kind === \"OperationDefinition\" && operation === \"subscription\";\n    }, wsLink, httpLink);\n    return link;\n  }\n}","map":{"version":3,"sources":["/Users/macuser/Desktop/Demo/api-routes-apollo-server-and-client/apollo/client.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","split","getMainDefinition","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","process","env","NODE_ENV","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","restore","link","createIsomorphLink","require","SchemaLink","schema","HttpLink","uri","credentials","WebSocketLink","wsLink","options","reconnect","log","query","kind","operation","httpLink"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\n\nlet apolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== \"production\") {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx;\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient());\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === \"undefined\") {\n    return createApolloClient(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  const ssrMode = typeof window === \"undefined\";\n  const cache = new InMemoryCache().restore(initialState);\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(),\n    cache\n  });\n}\n\nfunction createIsomorphLink() {\n  if (typeof window === \"undefined\") {\n    //server\n    const { SchemaLink } = require(\"apollo-link-schema\");\n    const { schema } = require(\"./schema\");\n    return new SchemaLink({ schema });\n  } else {\n    //browser\n\n    const { HttpLink } = require(\"apollo-link-http\");\n    //const httpLink = new...\n    return new HttpLink({\n      uri: \"/api/graphql\",\n      credentials: \"same-origin\"\n    });\n\n    const { WebSocketLink } = require(\"apollo-link-ws\");\n    const wsLink = new WebSocketLink({\n      uri: `ws://localhost:3000/api/subs`,\n      options: {\n        reconnect: true\n      }\n    });\n\n    console.log(\"SPLIT LINK: \", ({ query }) => {\n      const { kind, operation } = getMainDefinition(query);\n      return kind === \"OperationDefinition\" && operation === \"subscription\";\n    });\n\n    const link = split(\n      ({ query }) => {\n        const { kind, operation } = getMainDefinition(query);\n        return kind === \"OperationDefinition\" && operation === \"subscription\";\n      },\n      wsLink,\n      httpLink\n    );\n\n    return link;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}